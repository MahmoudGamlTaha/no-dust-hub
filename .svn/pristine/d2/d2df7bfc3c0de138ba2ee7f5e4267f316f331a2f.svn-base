package com.jwt.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.jwt.dao.UntreatedProductsDAO;
import com.jwt.model.DirtyProduct;
import com.jwt.model.DirtyProductInPackage;
import com.jwt.model.DirtyProductsForm;
import com.jwt.model.DirtyShipment;
import com.jwt.model.DirtyShipmentData;
import com.jwt.model.Facility;
import com.jwt.model.User;
import com.jwt.model.WashingPrograms;
import com.jwt.model.drivers;
import com.jwt.service.CreateDirtyShipmentService;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.UntreatedProductsService;
import com.jwt.service.UserService;
import com.jwt.service.ViewDirtyShipmentService;

@Controller
public class ViewDirtyShipmentController {
	
	@Autowired
	private ViewDirtyShipmentService dirtyService;
	

	@Autowired
	private UserService userService;
	
	@Autowired
	private ReleasingProductsService shipmentService;
	
	@Autowired
	private CreateDirtyShipmentService createDirtyService;
	
	@Autowired
	private UntreatedProductsService untreatedProductsServic;
	
	@RequestMapping(value = "/ViewDirtyShipments")
	public ModelAndView viewdirtyshipment(ModelAndView model) throws IOException {
		 User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
			}
			Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

		List<DirtyShipment> shipments = dirtyService.getAllDirtyShipments(facility.getId());
		model.addObject("dirtyList", shipments);
		model.setViewName("ViewDirtyShipments");
		return model;
	}
	
	
	
	@RequestMapping(value = "/DirtyShipmentDetails",method = RequestMethod.GET)
	public ModelAndView ViewDirtyShipmentDetails(ModelAndView model ,@RequestParam(value = "shipmentID", required = true) String shipment_id) throws IOException {
		List<DirtyShipmentData> shipments = dirtyService.getShipmentData(shipment_id);
		//System.out.println(shipments.get(0).getLundry_name());
		List<DirtyProduct> products = dirtyService.getDirtyShipmentProduct(shipment_id);
		//if(dirtyService.checkStateOfShipment(Integer.parseInt(shipment_id)).equals("1"))
		//{
		model.addObject("shipmentData", shipments.get(0));
		model.addObject("shipmentProducts", products);
		model.addObject("shipmentID", shipment_id);
		//}
		//model.addObject("dirtyList", shipments);
		model.setViewName("DirtyShipmentDetails");
		return model;
	}

	@RequestMapping(value = "/approveDirtyShipment", method = RequestMethod.POST,consumes ="application/json")
		public ResponseEntity<String> approveDirtyShipment(@RequestBody  DirtyProductsForm dirtyForm)throws ServletException, IOException {
			   User u = new User();
				Authentication auth = SecurityContextHolder.getContext().getAuthentication();
				if (!(auth instanceof AnonymousAuthenticationToken)) {
					UserDetails userDetail = (UserDetails) auth.getPrincipal();
					System.out.println(userDetail);
				String user="";
				user=userDetail.getUsername();
			    u=userService.getUser(user);
			    System.out.println("productsIds"+dirtyForm.getProductsIds2());
			    System.out.println("user"+u.getUSER_NAME());
				}
				if(u.getUSER_NAME() == null)
				{
					return new ResponseEntity<String>("no session", HttpStatus.OK);
				}
				System.out.println("submited1 : "+dirtyForm.getShipment_id());
				if(dirtyService.checkStateOfShipment(Integer.parseInt(dirtyForm.getShipment_id())).equals("1"))
				{
				
					String submit = dirtyService.appproveDirtyShipment(dirtyForm.getProductsIds(),dirtyForm.getProductsIds2() ,Integer.parseInt(dirtyForm.getShipment_id()), u.getUSER_NAME()) ;		
			    System.out.println("submited : "+submit);
				if(submit.equals("true"))
				{
					return new ResponseEntity<String>("success", HttpStatus.OK);

				}
				else {			
					return new ResponseEntity<String>("not success", HttpStatus.OK);

				 }
				}
				else {
					return new ResponseEntity<String>("alreadyApproved", HttpStatus.OK);
				}

		}
	
	
	
	
	@RequestMapping(value = "/ViewExternalShipments")
	public ModelAndView viewExternalShipments(ModelAndView model) throws IOException {
		 User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
			}
			//Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

		List<DirtyShipment> shipments = dirtyService.getExternalLundry();
		model.addObject("dirtyList", shipments);
		model.setViewName("ViewExternalShipments");
		return model;
	}
	
	
	@RequestMapping(value = "/ExternalShipmentDetails",method = RequestMethod.GET)
	public ModelAndView ExternalShipmentDetails(ModelAndView model ,@RequestParam(value = "shipmentID", required = true) String shipment_id) throws IOException {
		List<DirtyShipmentData> shipments = dirtyService.getShipmentData(shipment_id);
		//System.out.println(shipments.get(0).getLundry_name());
		List<DirtyProduct> products = dirtyService.getDirtyShipmentProduct(shipment_id);
		//if(dirtyService.checkStateOfShipment(Integer.parseInt(shipment_id)).equals("1"))
		//{
		model.addObject("shipmentData", shipments.get(0));
		model.addObject("shipmentProducts", products);
		model.addObject("shipmentID", shipment_id);
		//}
		//model.addObject("dirtyList", shipments);
		model.setViewName("ExternalShipmentDetails");
		return model;
	}

	
	//ReceiveUntreatedProducts
	
	@RequestMapping(value = "/ReceiveUntreatedProducts")
	public ModelAndView ReceiveUntreatedProducts(ModelAndView model) throws IOException {
		User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
		u=userService.getUser(user);
		
		}
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
		List<DirtyProductInPackage> products = new ArrayList<DirtyProductInPackage>();
		//System.out.println(products.get(0).getProduct_sku());
		List<WashingPrograms> programs = createDirtyService.getWashingPrograms();
		List<Facility> lundries = new ArrayList<Facility>();
		//System.out.println("size of lundries "+lundries.size());
		List<drivers>drivers = createDirtyService.getAllDrivers();
		//System.out.println("size drivers "+drivers.size());
		ModelAndView model1 = new ModelAndView();
		DirtyProductsForm dirtyForm = new DirtyProductsForm();
		
		/*List<UserRole> rols = userRoleService.getAllUserRole(u.getUSER_NAME());
		String flag = "";
		System.out.println("size"+ rols.size());
		for(int i =0;i<rols.size();i++)
		{
			if(rols.get(i).getRole_id()==5)
			{
				flag ="5";
				break;
			}
		}
		System.out.println(flag);
		if((u.getOrg_unit_id() ==1 )&& (flag.equals("5")))
		{
			products = createDirtyService.getProductsListNotPack(facility.getId());
			model1.setViewName("AbuRawashInternalLaundry");
		}
		else*/ if(u.getOrg_unit_id() ==1 )
		{
			model1.addObject("Lundry", "External");
			dirtyForm.setDriversList(drivers);
			lundries = createDirtyService.getExternalLundries();
			dirtyForm.setLundries_list(lundries);
			products = untreatedProductsServic.getUntreatedProducts();
			dirtyForm.setProduct_list(products);
			dirtyForm.setWashing_list(programs);
			dirtyForm.setAgentName(u.getUSER_NAME());
			dirtyForm.setAssignDate(dateFormat.format(date));
			dirtyForm.setWareHouseName(facility.getFacility_name());
		}
		else
		{
			//Facility facility1 = createDirtyService.getAbuRawashData();
			//lundries.add(facility1);
			//dirtyForm.setLundries_list(lundries);
			//products = createDirtyService.getProductsList(facility.getId());
			//model1.setViewName("CreateDirtyShipment");
		}
		
		model1.addObject("dirtyForm", dirtyForm);
		model1.setViewName("RecieveUntreatedProducts");

		return model1;
	
	}
	
	
	@RequestMapping(value = "/submitRecieveUntreatedProducts", method = RequestMethod.POST,consumes ="application/json")
	public ResponseEntity<String> submitRecieveUntreatedProducts(@RequestBody  DirtyProductsForm dirtyForm)throws ServletException, IOException {
		System.out.println("driver "+ dirtyForm.getSelectedDriver());
		//System.out.println("date"+coverForm.getCoverProducts().size());
		Gson gson = new Gson();
		String json = gson.toJson(dirtyForm.getDirty_list());
		  
		   User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
		    System.out.println("user"+u.getUSER_NAME());
			}
			String submit = new String();
			if(u.getUSER_NAME() == null)
			{
				return new ResponseEntity<String>("no session", HttpStatus.OK);
				

			}
			else {
				Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

				
				submit=untreatedProductsServic.submitRecieveUntreatedProducts(dirtyForm.getSelectedLundry(),"1", json, u.getUser_name(), dirtyForm.getSelectedDriver());

			}
			
			System.out.println("submited1 : "+dirtyForm.getSelectedDriver()+" "+ u.getUSER_NAME()+" "+ dirtyForm.getSelectedLundry()+" "+json);
			System.out.println("submited : "+submit);
			if(!submit.equals("")&& !submit.equals("0"))
			{
				return new ResponseEntity<String>(submit, HttpStatus.OK);

			}
			else {				
				return new ResponseEntity<String>("not success", HttpStatus.OK);

			}

	}
}
