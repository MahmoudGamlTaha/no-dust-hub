package com.jwt.dao;

import java.util.List;

import javax.persistence.ParameterMode;

import org.hibernate.SessionFactory;
import org.hibernate.procedure.ProcedureCall;
import org.hibernate.procedure.ProcedureOutputs;
import org.hibernate.result.ResultSetOutput;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.jwt.model.ActualCounts;
import com.jwt.model.DirtyShipmentData;
import com.jwt.model.InventoryProduct;
import com.jwt.model.NewProduct;
import com.jwt.model.ProductComponentDetails;
import com.jwt.model.ProductRawMaterial;
import com.jwt.model.Products;
import com.jwt.model.ProductsType;
import com.jwt.model.Treatment;


@Repository
public class StockManagmentDAOImpl implements StockManagmentDAO {
	@Autowired
	private SessionFactory sessionFactory;

	@SuppressWarnings("unchecked")
	@Override
	public List<InventoryProduct> getAllProducts(int facility_id) {
		List<InventoryProduct>products=sessionFactory.getCurrentSession().createSQLQuery("SELECT facilty_info.facility_id,CAST( facilty_info.total_stock_quantity AS varchar)AS quantity, products_.product_name ,trt.\"TRE_NAME\" AS treatment ,facilty_info.product_id \r\n" + 
				"	FROM facility_product_info facilty_info , facilities facility  ,products products_ , \"TREATMENT_TYPES\" trt \r\n" + 
				"	where facilty_info.facility_id = facility.id AND trt.\"TRE_ID\" = products_.treatment_id AND facilty_info.product_id = products_.product_sku\r\n" + 
				"	AND facilty_info.facility_id = "+facility_id+"AND products_.product_category =1 And products_.type =1 AND facilty_info.total_stock_quantity >0").setResultTransformer(Transformers.aliasToBean(InventoryProduct.class)).list();
				return products;
	}

	@SuppressWarnings("unchecked")
	@Override
	public String submitConvetProducts(int facility_id, String products, String username) {

		ProcedureCall procedureCall = sessionFactory.getCurrentSession().createStoredProcedureCall("submit_convert_product");
		procedureCall.registerParameter("p_facility_id", Integer.class, ParameterMode.IN);
		procedureCall.registerParameter("p_products_data", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_logged_user", String.class, ParameterMode.IN);

		procedureCall.getParameterRegistration("p_facility_id").bindValue(facility_id);
		procedureCall.getParameterRegistration("p_products_data").bindValue(products);
		procedureCall.getParameterRegistration("p_logged_user").bindValue(username);

		ProcedureOutputs procedureOutputs = procedureCall.getOutputs();
		ResultSetOutput resultSetOutput = (ResultSetOutput) procedureOutputs.getCurrent();
		@SuppressWarnings("rawtypes")
		List results = resultSetOutput.getResultList();
		String result = (String)results.get(0);
		//System.out.println("function response "+ result);
		return result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<DirtyShipmentData> getConvertRequests(int facility_id) {
		List<DirtyShipmentData>shipments=sessionFactory.getCurrentSession().createSQLQuery("select ship.id AS shipment_id , ship.shipment_expected_delivery_date AS shipment_date, log.logged_user ,ship.last_status\r\n" + 
				"from shippments ship  , shipments_logs log\r\n" + 
				"where ship.shipment_type_id=6  and ship.id = log.shipment_id and ship.shippment_destination_id = '"+ facility_id+"' ORDER By ship.id").setResultTransformer(Transformers.aliasToBean(DirtyShipmentData.class)).list();
				return shipments;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<InventoryProduct> getConvertReqProducts(int convert_id) {
		List<InventoryProduct>products=sessionFactory.getCurrentSession().createSQLQuery("select  pro.product_name , treatment.\"TRE_NAME\" as treatment , CAST(details.quantity_shipped AS VARCHAR)as quantity,details.comment \r\n" + 
				"from shipments_details details , products pro , \"TREATMENT_TYPES\" treatment\r\n" + 
				"where details.product_id = pro.product_sku  and treatment.\"TRE_ID\" = pro.treatment_id\r\n" + 
				"and details.shipment_id= "+convert_id).setResultTransformer(Transformers.aliasToBean(InventoryProduct.class)).list();
				return products;
	}

	@SuppressWarnings("unchecked")
	@Override
	public DirtyShipmentData getConvertReqWith(int id) {
		List<DirtyShipmentData>shipments=sessionFactory.getCurrentSession().createSQLQuery("select ship.id AS shipment_id , ship.shipment_expected_delivery_date AS shipment_date, log.logged_user , ship.last_status\r\n" + 
				"from shippments ship  , shipments_logs log\r\n" + 
				"where shipment_type_id=6 and ship.id = log.shipment_id and ship.id="+id).setResultTransformer(Transformers.aliasToBean(DirtyShipmentData.class)).list();
				if(shipments.size()>0)
		          return shipments.get(0);
				else 
					return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public String approveRejectConvertRequest(long shipment_id, int facility_id, String logged_user,
			String approval_val) {
		ProcedureCall procedureCall = sessionFactory.getCurrentSession().createStoredProcedureCall("approve_convert_product");
		procedureCall.registerParameter("p_shipment_id", Long.class, ParameterMode.IN);
		procedureCall.registerParameter("p_facility_id", Integer.class, ParameterMode.IN);
		procedureCall.registerParameter("p_logged_user", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_approval_val", String.class, ParameterMode.IN);

		procedureCall.getParameterRegistration("p_shipment_id").bindValue(shipment_id);
		procedureCall.getParameterRegistration("p_facility_id").bindValue(facility_id);
		procedureCall.getParameterRegistration("p_logged_user").bindValue(logged_user);
		procedureCall.getParameterRegistration("p_approval_val").bindValue(approval_val);

		ProcedureOutputs procedureOutputs = procedureCall.getOutputs();
		ResultSetOutput resultSetOutput = (ResultSetOutput) procedureOutputs.getCurrent();
		@SuppressWarnings("rawtypes")
		List results = resultSetOutput.getResultList();
		String result = (String)results.get(0);
		return result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Products> get_product_list(int type,int fac_id) {
		// TODO Auto-generated method stub
		return (List<Products>)sessionFactory.getCurrentSession().createSQLQuery(" select pr.product_sku,pr.treatment_id ,pr.dms_product_id,pr.product_name, tt.\"TRE_NAME\" as treatment_name , fi.total_stock_quantity from facility_product_info fi , products pr,\"TREATMENT_TYPES\" tt where pr.product_sku=fi.product_id and tt.\"TRE_ID\"=pr.treatment_id and  fi.facility_id="+fac_id+"and fi.total_stock_quantity>0  and pr.type="+type+" and product_category=1 order by product_name").setResultTransformer(Transformers.aliasToBean(Products.class)).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public String Submit_Conversion(int fac_id, String logged_user, String from_type, String to_type,
			String prod_data) {
		ProcedureCall procedureCall = sessionFactory.getCurrentSession().createStoredProcedureCall("submit_product_conversion");
		procedureCall.registerParameter("p_facility_id", Integer.class, ParameterMode.IN);
		procedureCall.registerParameter("p_logged_user", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_from_type", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_to_type", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_products", String.class, ParameterMode.IN);

		procedureCall.getParameterRegistration("p_facility_id").bindValue(fac_id);
		procedureCall.getParameterRegistration("p_logged_user").bindValue(logged_user);
		procedureCall.getParameterRegistration("p_from_type").bindValue(from_type);
		procedureCall.getParameterRegistration("p_to_type").bindValue(to_type);
		procedureCall.getParameterRegistration("p_products").bindValue(prod_data);
		ProcedureOutputs procedureOutputs = procedureCall.getOutputs();
		ResultSetOutput resultSetOutput = (ResultSetOutput) procedureOutputs.getCurrent();
		@SuppressWarnings("rawtypes")
		List results = resultSetOutput.getResultList();
		String result = (String)results.get(0);
		return result;
		// TODO Auto-generated method stub
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Treatment> Get_treatment_List() {
		// TODO Auto-generated method stub
		return (List<Treatment>)sessionFactory.getCurrentSession().createSQLQuery("select \"TRE_ID\" as treatment_id , \"TRE_NAME\" as treatment_name from \"TREATMENT_TYPES\" where \"TRE_ID\"!=100").setResultTransformer(Transformers.aliasToBean(Treatment.class)).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<NewProduct> Get_New_Product_List() {
		// TODO Auto-generated method stub
		return (List<NewProduct>)sessionFactory.getCurrentSession().createSQLQuery("   select\r\n" + 
				"        pr.product_name ,\r\n" + 
				"        pr.product_sku  \r\n" + 
				"    from\r\n" + 
				"        products pr \r\n" + 
				"    where\r\n" + 
				"        pr.product_sku in (\r\n" + 
				"            select\r\n" + 
				"                distinct(pc.product_sku) from product_component pc\r\n" + 
				"        )").setResultTransformer(Transformers.aliasToBean(NewProduct.class)).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public String Submit_Create_New_Product(String products, String logged_user, int facility) {
		// TODO Auto-generated method stub
		ProcedureCall procedureCall = sessionFactory.getCurrentSession().createStoredProcedureCall("submit_create_new_product");

		procedureCall.registerParameter("p_facility_id", Integer.class, ParameterMode.IN);
		procedureCall.registerParameter("p_products", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_logged_user", String.class, ParameterMode.IN);

		procedureCall.getParameterRegistration("p_facility_id").bindValue(facility);
		procedureCall.getParameterRegistration("p_products").bindValue(products);
		procedureCall.getParameterRegistration("p_logged_user").bindValue(logged_user);
		ProcedureOutputs procedureOutputs = procedureCall.getOutputs();
		ResultSetOutput resultSetOutput = (ResultSetOutput) procedureOutputs.getCurrent();
		@SuppressWarnings("rawtypes")
		List results = resultSetOutput.getResultList();
		String result = (String)results.get(0);
		return result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ProductComponentDetails> Get_Component_Details(String product_sku, int fac) {
		// TODO Auto-generated method stub
		return (List<ProductComponentDetails>)sessionFactory.getCurrentSession().createSQLQuery("select pr.product_name , CAST(fc.total_stock_quantity AS numeric),CAST(pc.quantity AS numeric)\r\n" + 
				"from products pr, facility_product_info fc, product_component pc\r\n" + 
				"where pr.product_sku=pc.component_sku and fc.facility_id= "+fac+" and fc.product_id=pc.component_sku and pc.product_sku='"+product_sku+"'").setResultTransformer(Transformers.aliasToBean(ProductComponentDetails.class)).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ProductRawMaterial> Get_Raw_Materials(int order_id) {
		// TODO Auto-generated method stub
		return (List<ProductRawMaterial>)sessionFactory.getCurrentSession().createSQLQuery("select products.product_name , CAST(products.quantity as numeric), mu.unit\r\n" + 
				"from\r\n" + 
				"(select pr.product_name , CAST(sum(op.product_quantity) AS numeric)as quantity , pr.first_measurment_unit\r\n" + 
				"from products pr , operations op\r\n" + 
				"where op.transaction_id="+order_id+" and transaction_type_id='3' and transaction_movement_type='-1' and pr.product_sku=op.product_id\r\n" + 
				"group by pr.product_name , pr.first_measurment_unit\r\n" + 
				"order by pr.product_name) products\r\n" + 
				"LEFT JOIN measurment_unit mu ON CAST(mu.id AS TEXT)=CAST(products.first_measurment_unit AS text)").setResultTransformer(Transformers.aliasToBean(ProductRawMaterial.class)).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ProductsType> lst_shipment_type() {
		// TODO Auto-generated method stub
		return (List<ProductsType>)sessionFactory.getCurrentSession().createSQLQuery("select pt.id as type_id , pt.type as type_name from products_type pt where transition_flag = 1").setResultTransformer(Transformers.aliasToBean(ProductsType.class)).list();
	}

}
