package com.jwt.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.jwt.model.DirtyShipmentData;
import com.jwt.model.Facility;
import com.jwt.model.InventoryCheck;
import com.jwt.model.InventoryFormData;
import com.jwt.model.InventoryProduct;
import com.jwt.model.User;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.StockManagmentService;
import com.jwt.service.UserService;

@Controller
public class StockManagementController {
	@Autowired
	private StockManagmentService stockService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private ReleasingProductsService shipmentService;
	
@RequestMapping(value="/Convertproduct")
public ModelAndView convertproduct(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
	List<InventoryProduct> products = stockService.getAllProducts(facility.getId());
	System.out.println(products.size());
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	Date date = new Date();
	ModelAndView newMod=new ModelAndView();
	newMod.addObject("date", dateFormat.format(date));
	newMod.addObject("wareHouse", facility.getFacility_name());
	newMod.addObject("agent", u.getUSER_NAME());
	newMod.addObject("products",products);
	newMod.setViewName("convertproduct");
	return newMod;
}

@RequestMapping(value = "/submitConvertProduct", method = RequestMethod.POST,consumes ="application/json")
public ResponseEntity<String> submitConvertProduct(@RequestBody InventoryFormData inventoryForm)throws ServletException, IOException {

	Gson gson = new Gson();
	String json = gson.toJson(inventoryForm.getProducts());
		System.out.println("json : "+json);
	   User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
	//	System.out.println("user : "+user);
	//	System.out.println("auth :"+userDetail.getAuthorities());
	//	List<UserTeam> listTeam = userTeamService.getAllUserTeam(user);
	    u=userService.getUser(user);

		}
		String submited = new String();
		if(u.getUSER_NAME() != null)
		{
			
			submited=stockService.submitConvetProducts(u.getOrg_unit_id(),json,u.getUSER_NAME());

		}
		else {
			return new ResponseEntity<String>("no session", HttpStatus.OK);
		}
		System.out.println("submited : "+submited);
		if(submited.equals("true"))
		{
			return new ResponseEntity<String>("success", HttpStatus.OK);

		}
		else {
			return new ResponseEntity<String>("not success", HttpStatus.OK);

		}
}


@RequestMapping(value="/ConvertProductRequests")
public ModelAndView ConvertProductRequests(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	List<DirtyShipmentData> shipments = stockService.getConvertRequests(u.getOrg_unit_id());
	//System.out.println(shipments.size());
	ModelAndView newMod=new ModelAndView();
	newMod.addObject("shipments",shipments);
	newMod.setViewName("ConvetProductsRequestLst");
	return newMod;
}
@RequestMapping(value="/ConvertProductsDetails")
public ModelAndView ConvertProductsDetails(ModelAndView model,@RequestParam(value = "ConvertID", required = true) int  convert_id,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	ModelAndView newMod=new ModelAndView();
	Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
	DirtyShipmentData shipmentData = stockService.getConvertReqWith(convert_id);
	if(shipmentData !=null) {
	List<InventoryProduct> products = stockService.getConvertReqProducts(convert_id);
	System.out.println(products.size());
	newMod.addObject("convertDate", shipmentData.getShipment_date());
	newMod.addObject("LoggedUser", shipmentData.getLogged_user());
	newMod.addObject("warehouse", facility.getFacility_name());
	newMod.addObject("convertID", convert_id);
	newMod.addObject("products",products);
	}
	newMod.setViewName("ConvertProductsDetails");
	return newMod;
}
@RequestMapping(value = "/approveRejectConvertReq", method = RequestMethod.POST,consumes ="application/json")
public ResponseEntity<String> approveRejectConvertReq(@RequestBody InventoryCheck inventoryCheck)throws ServletException, IOException {
	  System.out.println(inventoryCheck.getApproveVa() + inventoryCheck.getId()); 
	User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
	    u=userService.getUser(user);

		}
		String submited = new String();
		if(u.getUSER_NAME() != null)
		{
			
			submited=stockService.approveRejectConvertRequest(inventoryCheck.getId(), u.getOrg_unit_id(), u.getUser_name(), inventoryCheck.getApproveVa());

		}
		else {
			return new ResponseEntity<String>("no session", HttpStatus.OK);
		}
		System.out.println("submited : "+submited);
		if(submited.equals("true"))
		{
			return new ResponseEntity<String>("success", HttpStatus.OK);

		}
		else {
			return new ResponseEntity<String>("not success", HttpStatus.OK);

		}
}


}
