package com.jwt.controller;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.jwt.model.CleanShipmentForm;
import com.jwt.model.Facility;
import com.jwt.model.Products;
import com.jwt.model.User;
import com.jwt.model.drivers;
import com.jwt.service.CleanShipmentService;
import com.jwt.service.ReceivingProductsService;
import com.jwt.service.UserService;

@Controller
public class CleanShipmentController {
	@Autowired
	UserService user_service;
	@Autowired
	ReceivingProductsService receiving_service;

	@Autowired
	CleanShipmentService clean_service;
@RequestMapping(value="/CreateCleanShipment")
public ModelAndView Create_Clean_Shipment()
{	ModelAndView new_Mod=new ModelAndView();
	User u=new User();
	CleanShipmentForm clean_form=new CleanShipmentForm();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();	
		System.out.println("UserName"+userDetail.getUsername());
	    u=user_service.getUser(userDetail.getUsername());
	    clean_form.setAgent_name(u.getDisplay_name());
	    Facility fac=receiving_service.Get_Facility_Info(u.getOrg_unit_id());
	    clean_form.setWarehouse_name(fac.getFacility_name());
	    LocalDate date1=LocalDate.now();
		Date rec_date1=java.sql.Date.valueOf(date1);
		String check_current=String.valueOf(rec_date1);
		String [] split_date=check_current.split(" ");
		clean_form.setReq_date(split_date[0]);
		List<drivers>lst_drivers=clean_service.Get_driver_List();
		List<Facility> dest_warehouses=clean_service.Get_detsination_facility(u.getOrg_unit_id());
		System.out.println("Dest_size"+dest_warehouses.size());
		clean_form.setDriver_lst(lst_drivers);
		clean_form.setFacilities(dest_warehouses);
	//	System.out.println("Size"+lst_drivers.size());
		List<Products> lst_prod=clean_service.Get_Clean_Packs(u.getOrg_unit_id());
		System.out.println(lst_prod.get(0).getQuantity());
		clean_form.setProd_lst(lst_prod);
}
	new_Mod.addObject("clean_form", clean_form);
	
	new_Mod.setViewName("CreateCleanShipment");
	

	return new_Mod;
}
@RequestMapping(value="/SubmitSendCleanShipment",method = RequestMethod.POST,consumes = "application/json")
public ResponseEntity<String> Submit_Clean_Shipment(@RequestBody CleanShipmentForm clean_form)
{
	String resp="";
	String pro="";
	// resp=clean_service.Submit_Send_clean_Shipment(1, clean_form.getDest_id(), clean_form.getDriver_id(), pro, clean_form.getAgent_name());
	return new ResponseEntity<String>(resp,HttpStatus.OK);
}
}
