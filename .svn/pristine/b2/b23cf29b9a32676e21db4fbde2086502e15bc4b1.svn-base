package com.jwt.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.jwt.model.DirtyProduct;
import com.jwt.model.DirtyProductInPackage;
import com.jwt.model.DirtyProductsForm;
import com.jwt.model.Facility;
import com.jwt.model.User;
import com.jwt.model.UserRole;
import com.jwt.model.WashingPrograms;
import com.jwt.model.drivers;
import com.jwt.service.CreateDirtyShipmentService;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.UserRoleService;
import com.jwt.service.UserService;

@Controller
public class CreateNewDirtyShipment {
	
	@Autowired
	private CreateDirtyShipmentService createDirtyService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private UserRoleService userRoleService;
	
	@Autowired
	private ReleasingProductsService shipmentService;
	//InternalDirtyShipment
	@RequestMapping(value = "/CreateDirtyShipment")
	public ModelAndView CreateDirtyShipment(ModelAndView model) throws IOException {
		User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
		u=userService.getUser(user);
		
		}
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
		List<DirtyProductInPackage> products = new ArrayList<DirtyProductInPackage>();
		//System.out.println(products.get(0).getProduct_sku());
		List<WashingPrograms> programs = createDirtyService.getWashingPrograms();
		List<Facility> lundries = new ArrayList<Facility>();
		//System.out.println("size of lundries "+lundries.size());
		List<drivers>drivers = createDirtyService.getAllDrivers();
		//System.out.println("size drivers "+drivers.size());
		ModelAndView model1 = new ModelAndView();
		DirtyProductsForm dirtyForm = new DirtyProductsForm();
		dirtyForm.setWashing_list(programs);
		dirtyForm.setDriversList(drivers);
		dirtyForm.setAgentName(u.getUSER_NAME());
		dirtyForm.setAssignDate(dateFormat.format(date));
		dirtyForm.setWareHouseName(facility.getFacility_name());
		/*List<UserRole> rols = userRoleService.getAllUserRole(u.getUSER_NAME());
		String flag = "";
		System.out.println("size"+ rols.size());
		for(int i =0;i<rols.size();i++)
		{
			if(rols.get(i).getRole_id()==5)
			{
				flag ="5";
				break;
			}
		}
		System.out.println(flag);
		if((u.getOrg_unit_id() ==1 )&& (flag.equals("5")))
		{
			products = createDirtyService.getProductsListNotPack(facility.getId());
			model1.setViewName("AbuRawashInternalLaundry");
		}
		else*/ if(u.getOrg_unit_id() ==1 )
		{
			model1.addObject("Lundry", "External");
			lundries = createDirtyService.getExternalLundries();
			dirtyForm.setLundries_list(lundries);
			
			model1.setViewName("CreateDirtyShipment");
			products = createDirtyService.getProductsList(facility.getId());
			//model1.addObject("validation", "false");

		}
		else
		{
			Facility facility1 = createDirtyService.getAbuRawashData();
			lundries.add(facility1);
			dirtyForm.setLundries_list(lundries);
			
			products = createDirtyService.getProductsList(facility.getId());
			model1.setViewName("CreateDirtyShipment");
		}
		if (products.size()==0 || programs.size()==0)
		{ 
			model1.addObject("validation", "false");
		}
		dirtyForm.setProduct_list(products);
		model1.addObject("dirtyForm", dirtyForm);
		
		return model1;
	
	}
	
	
	
	@RequestMapping(value = "/InternalDirtyShipment")
	public ModelAndView CreateInternalDirtyShipment(ModelAndView model) throws IOException {
		User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
		u=userService.getUser(user);
		
		}
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
		List<DirtyProductInPackage> products = new ArrayList<DirtyProductInPackage>();
		//System.out.println(products.get(0).getProduct_sku());
		List<WashingPrograms> programs = createDirtyService.getWashingPrograms();
		List<Facility> lundries = new ArrayList<Facility>();
		//System.out.println("size of lundries "+lundries.size());
		List<drivers>drivers = createDirtyService.getAllDrivers();
		//System.out.println("size drivers "+drivers.size());
		ModelAndView model1 = new ModelAndView();
		DirtyProductsForm dirtyForm = new DirtyProductsForm();
		dirtyForm.setWashing_list(programs);
		dirtyForm.setDriversList(drivers);
		dirtyForm.setAgentName(u.getUSER_NAME());
		dirtyForm.setAssignDate(dateFormat.format(date));
		dirtyForm.setWareHouseName(facility.getFacility_name());
		List<UserRole> rols = userRoleService.getAllUserRole(u.getUSER_NAME());
		String flag = "";
		System.out.println("size"+ rols.size());
		for(int i =0;i<rols.size();i++)
		{
			if(rols.get(i).getRole_id()==5)
			{
				flag ="5";
				break;
			}
		}
		System.out.println(flag);
		if((u.getOrg_unit_id() ==1 )&& (flag.equals("5")))
		{
			products = createDirtyService.getProductsListNotPack(facility.getId());
			model1.setViewName("AbuRawashInternalLaundry");
		}
		else if(u.getOrg_unit_id() ==1 )
		{
			model1.addObject("Lundry", "External");
			lundries = createDirtyService.getExternalLundries();
			dirtyForm.setLundries_list(lundries);
			model1.setViewName("CreateDirtyShipment");
			products = createDirtyService.getProductsList(facility.getId());
		}
		else
		{
			Facility facility1 = createDirtyService.getAbuRawashData();
			lundries.add(facility1);
			dirtyForm.setLundries_list(lundries);
			products = createDirtyService.getProductsList(facility.getId());
			model1.setViewName("CreateDirtyShipment");
		}
		dirtyForm.setProduct_list(products);
		model1.addObject("dirtyForm", dirtyForm);
		
		return model1;
	
	}
	
	
	@RequestMapping(value = "/submitDirtyShipment", method = RequestMethod.POST,consumes ="application/json")
	public ResponseEntity<String> submitCoverDetails(@RequestBody  DirtyProductsForm dirtyForm)throws ServletException, IOException {
		System.out.println("driver "+ dirtyForm.getSelectedDriver());
		//System.out.println("date"+coverForm.getCoverProducts().size());
		Gson gson = new Gson();
		String json = gson.toJson(dirtyForm.getDirty_list());
		  
		System.out.println("json "+json);
			System.out.println(json);
		   User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
		    System.out.println("user"+u.getUSER_NAME());
			}
			String submit = new String();
			if(u.getUSER_NAME() == null)
			{
				return new ResponseEntity<String>("no session", HttpStatus.OK);
				

			}
			else {
				Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

				String validation =gatheringAndValidate(dirtyForm.getDirty_list(),facility);
				if(validation.equals(""))
				{
				submit=createDirtyService.submitDirtyShipment(dirtyForm.getSelectedDriver(), u.getUSER_NAME(), dirtyForm.getSelectedLundry(),json) ;	
				}
				else {
					return new ResponseEntity<String>(validation, HttpStatus.OK);
				}

			}
			
			System.out.println("submited1 : "+dirtyForm.getSelectedDriver()+" "+ u.getUSER_NAME()+" "+ dirtyForm.getSelectedLundry()+" "+json);
			System.out.println("submited : "+submit);
			if(submit.equals("true"))
			{
				return new ResponseEntity<String>("success", HttpStatus.OK);

			}
			else {				
				return new ResponseEntity<String>("not success", HttpStatus.OK);

			}

	}
	
	
	private String gatheringAndValidate(List<DirtyProduct> produsts,Facility facility)
	{
		List<DirtyProductInPackage> dataBaseproducts = createDirtyService.getProductsList(facility.getId());
		System.out.println("size of validation"+dataBaseproducts.size());
		String validationString = "";
		for(int i =0 ;i< dataBaseproducts.size();i++ )
		{
			int Enteredquentity =0;
			for(int j =0 ;j< produsts.size();j++)
			{
				if (dataBaseproducts.get(i).getProduct_sku().equals(produsts.get(j).getProduct_id()))
				{
					Enteredquentity+=produsts.get(j).getQuantity();
				}
			}
			if (Enteredquentity > dataBaseproducts.get(i).getQuantity())
			{
				validationString+= dataBaseproducts.get(i).getProduct_name()+" Total Quantity you Entered is : "+Enteredquentity+ " And Actual is : "+dataBaseproducts.get(i).getQuantity()+"<br />";
				
			}
			
		}
		return validationString;
	}
	
	
	
	private String gatheringAndValidateNotInPacks(List<DirtyProduct> produsts,Facility facility)
	{
		List<DirtyProductInPackage> dataBaseproducts = createDirtyService.getProductsListNotPack(facility.getId());
		System.out.println("size of validation"+dataBaseproducts.size());
		String validationString = "";
		for(int i =0 ;i< dataBaseproducts.size();i++ )
		{
			int Enteredquentity =0;
			for(int j =0 ;j< produsts.size();j++)
			{
				if (dataBaseproducts.get(i).getProduct_sku().equals(produsts.get(j).getProduct_id()))
				{
					Enteredquentity+=produsts.get(j).getQuantity();
				}
			}
			if (Enteredquentity > dataBaseproducts.get(i).getQuantity())
			{
				validationString+= dataBaseproducts.get(i).getProduct_name()+" Total Quantity you Entered is : "+Enteredquentity+ " And Actual is : "+dataBaseproducts.get(i).getQuantity()+"<br />";
				
			}
			
		}
		return validationString;
	}
	
	
	@RequestMapping(value = "/submitInternalLaundry", method = RequestMethod.POST,consumes ="application/json")
	public ResponseEntity<String> submitInternalLaundry(@RequestBody  DirtyProductsForm dirtyForm)throws ServletException, IOException {
		System.out.println("driver "+ dirtyForm.getSelectedDriver());
		//System.out.println("date"+coverForm.getCoverProducts().size());
		Gson gson = new Gson();
		String json = gson.toJson(dirtyForm.getDirty_list());
		  
		System.out.println("json "+json);
			System.out.println(json);
		   User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
		    System.out.println("user"+u.getUSER_NAME());
			}
			String submit = new String();
			if(u.getUSER_NAME() == null)
			{
				return new ResponseEntity<String>("no session", HttpStatus.OK);
				

			}
			else {
				Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

				String validation =gatheringAndValidateNotInPacks(dirtyForm.getDirty_list(),facility);
				System.out.println("validation"+validation);
				if(validation.equals(""))
				{
				submit=createDirtyService.submitInternalLundry(json, u.getUser_name(), "1", "1", 1)	;
				}
				else {
					return new ResponseEntity<String>(validation, HttpStatus.OK);
				}

			}
			
		//	System.out.println("submited1 : "+dirtyForm.getSelectedDriver()+" "+ u.getUSER_NAME()+" "+ dirtyForm.getSelectedLundry()+" "+json);
			System.out.println("submited : "+submit);
			if(submit.equals("true"))
			{
				return new ResponseEntity<String>("success", HttpStatus.OK);

			}
			else {				
				return new ResponseEntity<String>("not success", HttpStatus.OK);

			}

	}
	
	
	
} 
