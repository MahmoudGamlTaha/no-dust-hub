package com.jwt.dao;

import java.util.List;

import javax.persistence.ParameterMode;

import org.hibernate.SessionFactory;
import org.hibernate.procedure.ProcedureCall;
import org.hibernate.procedure.ProcedureOutputs;
import org.hibernate.result.ResultSetOutput;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.jwt.model.Employee;
import com.jwt.model.ReceiveCashFinancailAccount;

@Repository
public class ReceivingCashDAOImpl implements ReceivingCashDAO {
	@Autowired
	private SessionFactory sessionFactory;
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Employee> getAllEmployee() {
		
		return sessionFactory.getCurrentSession().createQuery("from Employee ORDER BY FULL_NAME_EN")
				.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ReceiveCashFinancailAccount> getAllAccounts() {
		return sessionFactory.getCurrentSession().createQuery("from ReceiveCashFinancailAccount")
				.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public String submitReceiveCash(String financailAcc, String user, double amount, String employee , String comment) {
		ProcedureCall procedureCall = sessionFactory.getCurrentSession().createStoredProcedureCall("submit_receiving_cash");
		procedureCall.registerParameter("p_financial_account", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_logged_in_user", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_amount_money_received", Double.class, ParameterMode.IN);
		procedureCall.registerParameter("p_employee_user_name", String.class, ParameterMode.IN);
		procedureCall.registerParameter("p_comments", String.class, ParameterMode.IN);

		procedureCall.getParameterRegistration("p_financial_account").bindValue(financailAcc);
		procedureCall.getParameterRegistration("p_logged_in_user").bindValue(user);
		procedureCall.getParameterRegistration("p_amount_money_received").bindValue(amount);
		procedureCall.getParameterRegistration("p_employee_user_name").bindValue(employee);
		procedureCall.getParameterRegistration("p_comments").bindValue(comment);

		ProcedureOutputs procedureOutputs = procedureCall.getOutputs();
		ResultSetOutput resultSetOutput = (ResultSetOutput) procedureOutputs.getCurrent();
		@SuppressWarnings("rawtypes")
		List results = resultSetOutput.getResultList();
		String result = (String)results.get(0);
		return result;
	}

}
