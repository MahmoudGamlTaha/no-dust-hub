package com.jwt.controller;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.jwt.model.CashInOutForm;
import com.jwt.model.DirtyProductsForm;
import com.jwt.model.Driver;
import com.jwt.model.Facility;
import com.jwt.model.FinancialAccount;
import com.jwt.model.InventoryProduct;
import com.jwt.model.Payment_submit;
import com.jwt.model.User;
import com.jwt.model.drivers;
import com.jwt.model.PayrollPayment;
import com.jwt.service.CreateDirtyShipmentService;
import com.jwt.service.PayrollVendorService;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.UserService;

@Controller
public class PayrollVendorController {
	
	@Autowired
	UserService userService;
	
	@Autowired
	PayrollVendorService payrollVendorService;
	@Autowired
	
	private ReleasingProductsService shipmentService;
	
	@Autowired
	private CreateDirtyShipmentService createDirtyService;
	
	@RequestMapping(value="/PayrollPayment")
	public ModelAndView PayrollPayment(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
	{
		
		User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
		u=userService.getUser(user);
		
		}
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());
	    FinancialAccount account = payrollVendorService.GetPayrollAccount(u.getOrg_unit_id());
		CashInOutForm cashInOutForm = new CashInOutForm();
		List<drivers> drivers_lst = createDirtyService.getAllDrivers();
		//List<Driver> lst_drivers = shipmentService.GetAllDrivers();
		List<FinancialAccount> accounts = new ArrayList<FinancialAccount>();
		accounts.add(account);
		//
		List<PayrollPayment> pays = payrollVendorService.getPayrollPayment();
		//System.out.println("pays are "+pays.size());
		cashInOutForm.setAccounts(accounts);
		cashInOutForm.setDrivers_lst(drivers_lst);
		cashInOutForm.setAssignDate(dateFormat.format(date));
		cashInOutForm.setAgentName(u.getUSER_NAME());
		cashInOutForm.setWareHouseName(facility.getFacility_name());
		model.addObject("formData", cashInOutForm);
		model.addObject("pays", pays);
		model.setViewName("PayrollPayment");
		return model;
	}
	
	
	@RequestMapping(value = "/submitPayrollPayments", method = RequestMethod.POST,consumes ="application/json")
	public ResponseEntity<String> submitPayrollPayments(@RequestBody  Payment_submit pays )throws ServletException, IOException {
		System.out.println("driver "+ pays.getTotalPayed());
		//System.out.println("date"+coverForm.getCoverProducts().size());
		Gson gson = new Gson();
		String json = gson.toJson(pays.getPayments_lst());
		  
		System.out.println("json "+json);
			System.out.println(json);
		   User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
		    System.out.println("user"+u.getUSER_NAME());
			}
			String submit = new String();
			if(u.getUSER_NAME() == null)
			{
				return new ResponseEntity<String>("no session", HttpStatus.OK);
				

			}
			else {
				Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

				submit=payrollVendorService.submitPayroll(facility.getId(), u.getUser_name(),pays.getTotalPayed(), json)	;

			}
			
		////	System.out.println("submited1 : "+dirtyForm.getSelectedDriver()+" "+ u.getUSER_NAME()+" "+ dirtyForm.getSelectedLundry()+" "+json);
			System.out.println("submited : "+submit);
			if(submit.equals("true"))
			{
				return new ResponseEntity<String>("success", HttpStatus.OK);

			}
			else {				
				return new ResponseEntity<String>("not success", HttpStatus.OK);

			}

	}
	
	
	

}
