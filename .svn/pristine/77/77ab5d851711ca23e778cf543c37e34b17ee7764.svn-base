package com.jwt.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.jwt.model.Facility;
import com.jwt.model.InventoryProduct;
import com.jwt.model.Operation;
import com.jwt.model.ReportShipment;
import com.jwt.model.Shipment;
import com.jwt.model.ShipmentLog;
import com.jwt.model.ShipmentStatus;
import com.jwt.model.ShipmentType;
import com.jwt.model.User;
import com.jwt.service.CashOnCoverService;
import com.jwt.service.ReportService;
import com.jwt.service.UserService;

@Controller
public class ReportController {
	
	
	@Autowired 
	private ReportService reportService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private CashOnCoverService cashService;
	
	@RequestMapping(value = "/GeneralReports")
	public ModelAndView GeneralReports(ModelAndView model) throws IOException {
		List<Facility> warehouses = reportService.getALLWarehouses();
		List<ShipmentType> types = reportService.getShipmentTypes();
		//System.out.println(types.size());
		model.addObject("warehouses", warehouses);
		model.addObject("types", types);
		model.setViewName("GeneralReports");
		return model;
	}
	
	
	@RequestMapping(value = "/loadShipments",  method = RequestMethod.POST,consumes ="application/json")
	public  ResponseEntity<List<ReportShipment>> loadWarehouseProducts(@RequestBody ShipmentType shipmentType)throws ServletException, IOException {
		  User u = new User();
		  System.out.println("id : "+shipmentType.getShipment_type_id() + " "+shipmentType.getShipment_type());
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
			System.out.println("user : "+user);
		//	System.out.println("auth :"+userDetail.getAuthorities());
		//	List<UserTeam> listTeam = userTeamService.getAllUserTeam(user);
		    u=userService.getUser(user);
			}
			if(u.getUSER_NAME() != null)
			{
				List<ReportShipment> ships = reportService.getShipmentsOfFacility(Integer.valueOf(shipmentType.getShipment_type()), shipmentType.getShipment_type_id());
				//System.out.println("SIZE"+ships.size());
				 if(ships == null)
					{
						ReportShipment ship = new ReportShipment();
						ships = new ArrayList<ReportShipment>();
						ship.setState("not success");
						ships.add(ship);
						return new ResponseEntity<List<ReportShipment>>(ships, HttpStatus.OK);

					}
					else {
						//request.setAttribute("error","notDone");
						return new ResponseEntity<List<ReportShipment>>(ships, HttpStatus.OK);

					}

			}
			else {
				ReportShipment ship = new ReportShipment();
				ship.setState("no session");
				List<ReportShipment> ships = new ArrayList<ReportShipment>();
				ships.add(ship);
				return new ResponseEntity<List<ReportShipment>>(ships, HttpStatus.OK);
			}
			
			
	
	}
	@RequestMapping(value = "/GenralReportDetails")
	public ModelAndView GeneralReportShipment(ModelAndView model , @RequestParam(value = "ShipmentID", required = true) int shipID) throws IOException {
		ReportShipment ship = reportService.getShipmentByID(shipID);
		List<Operation>operations = reportService.getAllOperationShipID(shipID);
		List<ShipmentLog> logs = reportService.getLogsShipment(shipID);
		List<ShipmentStatus> statusLst = reportService.getAllStatus();
		System.out.println( ship.getDriver());
		model.addObject("shipment", ship);
		if((ship.getDriver().length())>3)
		{
			model.addObject("Shiptype", "notConvert");
		}
		else {
			model.addObject("Shiptype", "Convert");
		}
		model.addObject("operations", operations);
		System.out.println(statusLst.get(0).getStatus_id());
	
		model.addObject("logs", logs);
		model.addObject("statusLst", statusLst);
		model.setViewName("ReportShipDetail");
		return model;
	}

}
