package com.jwt.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.jwt.ApiClient.ApiClient;
import com.jwt.model.DirtyProduct;
import com.jwt.model.DirtyProductsForm;
import com.jwt.model.DirtyShipment;
import com.jwt.model.DirtyShipmentData;
import com.jwt.model.Facility;
import com.jwt.model.ProductListsCoverForm;
import com.jwt.model.User;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.UserService;
import com.jwt.service.ViewDirtyShipmentService;

@Controller
public class ViewDirtyShipmentController {
	
	@Autowired
	private ViewDirtyShipmentService dirtyService;
	

	@Autowired
	private UserService userService;
	
	@Autowired
	private ReleasingProductsService shipmentService;
	
	@RequestMapping(value = "/ViewDirtyShipments")
	public ModelAndView viewdirtyshipment(ModelAndView model) throws IOException {
		 User u = new User();
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			if (!(auth instanceof AnonymousAuthenticationToken)) {
				UserDetails userDetail = (UserDetails) auth.getPrincipal();
				System.out.println(userDetail);
			String user="";
			user=userDetail.getUsername();
		    u=userService.getUser(user);
			}
			Facility facility = shipmentService.getFacilityById(u.getOrg_unit_id());

		List<DirtyShipment> shipments = dirtyService.getAllDirtyShipments(facility.getId());
		model.addObject("dirtyList", shipments);
		model.setViewName("ViewDirtyShipments");
		return model;
	}
	
	
	
	@RequestMapping(value = "/DirtyShipmentDetails",method = RequestMethod.GET)
	public ModelAndView ViewDirtyShipmentDetails(ModelAndView model ,@RequestParam(value = "shipmentID", required = true) String shipment_id) throws IOException {
		List<DirtyShipmentData> shipments = dirtyService.getShipmentData(shipment_id);
		//System.out.println(shipments.get(0).getLundry_name());
		List<DirtyProduct> products = dirtyService.getDirtyShipmentProduct(shipment_id);
		//if(dirtyService.checkStateOfShipment(Integer.parseInt(shipment_id)).equals("1"))
		//{
		model.addObject("shipmentData", shipments.get(0));
		model.addObject("shipmentProducts", products);
		model.addObject("shipmentID", shipment_id);
		//}
		//model.addObject("dirtyList", shipments);
		model.setViewName("DirtyShipmentDetails");
		return model;
	}

	@RequestMapping(value = "/approveDirtyShipment", method = RequestMethod.POST,consumes ="application/json")
		public ResponseEntity<String> approveDirtyShipment(@RequestBody  DirtyProductsForm dirtyForm)throws ServletException, IOException {
			   User u = new User();
				Authentication auth = SecurityContextHolder.getContext().getAuthentication();
				if (!(auth instanceof AnonymousAuthenticationToken)) {
					UserDetails userDetail = (UserDetails) auth.getPrincipal();
					System.out.println(userDetail);
				String user="";
				user=userDetail.getUsername();
			    u=userService.getUser(user);
			    System.out.println("productsIds"+dirtyForm.getProductsIds2());
			    System.out.println("user"+u.getUSER_NAME());
				}
				if(u.getUSER_NAME() == null)
				{
					return new ResponseEntity<String>("no session", HttpStatus.OK);
				}
				System.out.println("submited1 : "+dirtyForm.getShipment_id());
				if(dirtyService.checkStateOfShipment(Integer.parseInt(dirtyForm.getShipment_id())).equals("1"))
				{
				
					String submit = dirtyService.appproveDirtyShipment(dirtyForm.getProductsIds(),dirtyForm.getProductsIds2() ,Integer.parseInt(dirtyForm.getShipment_id()), u.getUSER_NAME()) ;		
			    System.out.println("submited : "+submit);
				if(submit.equals("true"))
				{
					return new ResponseEntity<String>("success", HttpStatus.OK);

				}
				else {			
					return new ResponseEntity<String>("not success", HttpStatus.OK);

				 }
				}
				else {
					return new ResponseEntity<String>("alreadyApproved", HttpStatus.OK);
				}

		}
	
	
	  	
}
