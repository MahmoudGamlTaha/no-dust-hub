package com.jwt.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.websocket.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.jwt.model.ConsumableData;
import com.jwt.model.ConversionForm;
import com.jwt.model.DirtyProduct;
import com.jwt.model.DirtyProductInPackage;
import com.jwt.model.DirtyShipmentData;
import com.jwt.model.ExpectedQuantityOfProducts;
import com.jwt.model.Facility;
import com.jwt.model.InventoryCheck;
import com.jwt.model.InventoryFormData;
import com.jwt.model.InventoryProduct;
import com.jwt.model.NewProduct;
import com.jwt.model.ProductComponentDetails;
import com.jwt.model.ProductListsCoverForm;
import com.jwt.model.ProductRawMaterial;
import com.jwt.model.Products;
import com.jwt.model.Treatment;
import com.jwt.model.User;
import com.jwt.model.UserRole;
import com.jwt.service.ReceivingProductsService;
import com.jwt.service.ReleasingProductsService;
import com.jwt.service.StockManagmentService;
import com.jwt.service.UserRoleService;
import com.jwt.service.UserRoleServiceImpl;
import com.jwt.service.UserService;

@Controller
public class StockManagementController {
	@Autowired
	private StockManagmentService stockService;
	
	@Autowired
	private UserService userService;
	@Autowired
	private UserRoleService userRoleService;
	@Autowired
	private ReleasingProductsService shipmentService;
	@Autowired
	private ReceivingProductsService receivingService;
	
	@RequestMapping(value="/GetRawMaterials",method=RequestMethod.POST,consumes = "application/json")
	public ResponseEntity<String>Get_Order_RawMaterials(@RequestBody ConsumableData consum) throws JsonProcessingException
	{
		int order_id=Integer.parseInt(consum.getIds());
		List<ProductRawMaterial> lst=stockService.Get_Raw_Materials(order_id);
		ObjectMapper mapper=new ObjectMapper();
		String lst_mat=mapper.writeValueAsString(lst);
		return new ResponseEntity<String>(lst_mat,HttpStatus.OK);
	}
	
	@RequestMapping(value="/SubmitCreateProduct",method=RequestMethod.POST,consumes = "application/json")
	public ResponseEntity<String>SubmitCreatingProduct(@RequestBody ProductListsCoverForm form_data , HttpServletRequest request) throws JsonProcessingException
	{
		HttpSession session=request.getSession();
		List<Products> prod_lst=form_data.getLst_prods();
		ObjectMapper mapper=new ObjectMapper();
		String pro_data=mapper.writeValueAsString(prod_lst);
		User u = new User();
		String user="";
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
	
		user=userDetail.getUsername();
	    u=userService.getUser(user);
		}
		System.out.println(user);
		System.out.println(u.getOrg_unit_id());
		System.out.println(pro_data);

		List<ProductComponentDetails>lst_details=stockService.Get_Component_Details(prod_lst.get(0).getProduct_id(), Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
		int Pro_quan=Integer.parseInt(String.valueOf(prod_lst.get(0).getQuantity()));
		for(int i=0;i<lst_details.size();i++)
		{
			BigDecimal com_quan=lst_details.get(i).getQuantity();
			BigDecimal available_quan=lst_details.get(i).getTotal_stock_quantity();
			int total_quan=Integer.parseInt(String.valueOf(com_quan))*Integer.parseInt(String.valueOf(Pro_quan));
			int check_ava=Integer.parseInt(String.valueOf(available_quan));
			if(total_quan>check_ava)
			{
				String Error_Msg=lst_details.get(i).getProduct_name()+" don't have enough Quantity";
				return new ResponseEntity<String>(Error_Msg,HttpStatus.OK);
			}
		}

		String out_submit=stockService.Submit_Create_New_Product(pro_data, user, Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
		return new ResponseEntity<String>(out_submit,HttpStatus.OK);
	}
	
	@RequestMapping(value="/CreateProduct")
	public ModelAndView CreateNewProduct(ModelAndView model , HttpServletRequest request)
	{
		HttpSession session=request.getSession();
		User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
	    u=userService.getUser(user);
		}
		Facility facility = shipmentService.getFacilityById(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Date date = new Date();
		ModelAndView newMod=new ModelAndView();
		List<NewProduct>lst_products=stockService.Get_New_Product_List();
		newMod.addObject("date", dateFormat.format(date));
		newMod.addObject("wareHouse", facility.getFacility_name());
		newMod.addObject("agent", u.getUSER_NAME());
		newMod.addObject("lst_products", lst_products);
		newMod.setViewName("CreateProduct");
		return newMod;
	}
	
@RequestMapping(value="/Convertproduct")
public ModelAndView convertproduct(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	HttpSession session=request.getSession();
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	Facility facility = shipmentService.getFacilityById(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	List<InventoryProduct> products = stockService.getAllProducts(facility.getId());
	System.out.println(products.size());
	DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
	Date date = new Date();
	ModelAndView newMod=new ModelAndView();
	newMod.addObject("date", dateFormat.format(date));
	newMod.addObject("wareHouse", facility.getFacility_name());
	newMod.addObject("agent", u.getUSER_NAME());
	newMod.addObject("products",products);
	newMod.setViewName("convertproduct");
	return newMod;
}

@RequestMapping(value = "/submitConvertProduct", method = RequestMethod.POST,consumes ="application/json")
public ResponseEntity<String> submitConvertProduct(@RequestBody InventoryFormData inventoryForm , HttpServletRequest request)throws ServletException, IOException {

	Gson gson = new Gson();
	HttpSession session=request.getSession();
	String json = gson.toJson(inventoryForm.getProducts());
		System.out.println("json : "+json);
	   User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
	//	System.out.println("user : "+user);
	//	System.out.println("auth :"+userDetail.getAuthorities());
	//	List<UserTeam> listTeam = userTeamService.getAllUserTeam(user);
	    u=userService.getUser(user);

		}
		String submited = new String();
		if(u.getUSER_NAME() != null)
		{

			String validation = gatheringAndValidate(inventoryForm.getProducts(),Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
			if(validation.equals(""))
			{
			submited=stockService.submitConvetProducts(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))),json,u.getUSER_NAME());
			}
			else {
				return new ResponseEntity<String>(validation, HttpStatus.OK);
			}

		}
		else {
			return new ResponseEntity<String>("no session", HttpStatus.OK);
		}
		System.out.println("submited : "+submited);
		if(submited.equals("true"))
		{
			return new ResponseEntity<String>("success", HttpStatus.OK);

		}
		else {
			return new ResponseEntity<String>("not success", HttpStatus.OK);

		}
}

private String gatheringAndValidate(List<InventoryProduct> produsts,int facility_id)
{
	List<InventoryProduct> dataBaseproducts = stockService.getAllProducts(facility_id);
	System.out.println("size of validation"+dataBaseproducts.size());
	String validationString = "";
	for(int i =0 ;i< dataBaseproducts.size();i++ )
	{
		int Enteredquentity =0;
		for(int j =0 ;j< produsts.size();j++)
		{
			if (dataBaseproducts.get(i).getProduct_id().equals(produsts.get(j).getProduct_id()))
			{
				Enteredquentity+=Integer.valueOf(produsts.get(j).getQuantity());
			}
		}
		if (Enteredquentity > Integer.valueOf(dataBaseproducts.get(i).getQuantity()))
		{
			validationString+= dataBaseproducts.get(i).getProduct_name()+" Total Quantity you Entered is : "+Enteredquentity+ " And Actual is : "+dataBaseproducts.get(i).getQuantity()+"<br />";
			
		}
		
	}
	return validationString;
}


@RequestMapping(value="/ConvertProductRequests")
public ModelAndView ConvertProductRequests(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	HttpSession session=request.getSession();
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	List<DirtyShipmentData> shipments = stockService.getConvertRequests(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	//System.out.println(shipments.size());
	ModelAndView newMod=new ModelAndView();
	newMod.addObject("shipments",shipments);
	newMod.setViewName("ConvetProductsRequestLst");
	return newMod;
}
@RequestMapping(value="/ConvertProductsDetails")
public ModelAndView ConvertProductsDetails(ModelAndView model,@RequestParam(value = "ConvertID", required = true) int  convert_id,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	HttpSession session=request.getSession();
	 User u = new User();
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
		UserDetails userDetail = (UserDetails) auth.getPrincipal();
		System.out.println(userDetail);
	String user="";
	user=userDetail.getUsername();
    u=userService.getUser(user);
	}
	ModelAndView newMod=new ModelAndView();
	Facility facility = shipmentService.getFacilityById(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	DirtyShipmentData shipmentData = stockService.getConvertReqWith(convert_id);
	if(shipmentData !=null) {
	List<InventoryProduct> products = stockService.getConvertReqProducts(convert_id);
	System.out.println(products.size());
	newMod.addObject("convertDate", shipmentData.getShipment_date());
	newMod.addObject("LoggedUser", shipmentData.getLogged_user());
	newMod.addObject("status" ,shipmentData.getLast_status());
	newMod.addObject("warehouse", facility.getFacility_name());
	newMod.addObject("convertID", convert_id);
	newMod.addObject("products",products);
	String approved_by="";
	Date approval_date=new Date();
	if(shipmentData.getApproved_by()==null)
	{
		approved_by=u.getUser_name();
	}
	else
	{
		approved_by=shipmentData.getApproved_by();
		approval_date=shipmentData.getApproval_time();
	}
	newMod.addObject("approved_by", approved_by);
	newMod.addObject("approval_time",approval_date);
	}
	newMod.setViewName("ConvertProductsDetails");
	return newMod;
}
@RequestMapping(value = "/approveRejectConvertReq", method = RequestMethod.POST,consumes ="application/json")
public ResponseEntity<String> approveRejectConvertReq(@RequestBody InventoryCheck inventoryCheck, HttpServletRequest request)throws ServletException, IOException {
	  System.out.println(inventoryCheck.getApproveVa() + inventoryCheck.getId()); 
	  HttpSession session=request.getSession();
	User u = new User();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (!(auth instanceof AnonymousAuthenticationToken)) {
			UserDetails userDetail = (UserDetails) auth.getPrincipal();
			System.out.println(userDetail);
		String user="";
		user=userDetail.getUsername();
	    u=userService.getUser(user);

		}
		String submited = new String();
		if(u.getUSER_NAME() != null)
		{
			
			submited=stockService.approveRejectConvertRequest(inventoryCheck.getId(), Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))), u.getUser_name(), inventoryCheck.getApproveVa());

		}
		else {
			return new ResponseEntity<String>("no session", HttpStatus.OK);
		}
		System.out.println("submited : "+submited);
		if(submited.equals("true"))
		{
			return new ResponseEntity<String>("success", HttpStatus.OK);

		}
		else {
			return new ResponseEntity<String>("not success", HttpStatus.OK);

		}
}
@RequestMapping(value="/Conversion")
public ModelAndView Reverse_Conversions(ModelAndView model , HttpServletRequest request) throws JsonProcessingException
{
	HttpSession session=request.getSession();
	String username="";
	String display_name="";
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	User user=new User();
	Facility fac=new Facility();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
	UserDetails userDetail = (UserDetails) auth.getPrincipal();
	username=userDetail.getUsername();
	user=userService.getUser(username);
	display_name=user.getDisplay_name();
	System.out.println("Display Name : "+display_name);
	fac=receivingService.Get_Facility_Info(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	}
	List<Treatment> lst_treatment=stockService.Get_treatment_List();
	ObjectMapper mapper=new ObjectMapper();
	String x_treatments= mapper.writeValueAsString(lst_treatment);
	System.out.println(x_treatments);
	DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
	Date date = new Date();
	LocalDate date1=LocalDate.now();
	Date rec_date1=java.sql.Date.valueOf(date1);
	String check_current=String.valueOf(dateFormat.format(date));

	ConversionForm con_form=new ConversionForm();
	con_form.setWarehouse_name(fac.getFacility_name());
	con_form.setAgent_name(display_name);
	con_form.setConv_date(check_current);
	con_form.setFac_id(String.valueOf(session.getAttribute("fac_id")));
ModelAndView mod=new ModelAndView();
mod.setViewName("ReverseConversions");
mod.addObject("data",con_form);
mod.addObject("treatments", x_treatments);
return mod;
}
@RequestMapping(value="/ProductConversion")
public ModelAndView ProductConversion(ModelAndView model,HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException 
{
	HttpSession session=request.getSession();
	String username="";
	String display_name="";
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	User user=new User();
	Facility fac=new Facility();
	if (!(auth instanceof AnonymousAuthenticationToken)) {
	UserDetails userDetail = (UserDetails) auth.getPrincipal();
	username=userDetail.getUsername();
	user=userService.getUser(username);
	display_name=user.getDisplay_name();
	System.out.println("Display Name : "+display_name);
	fac=receivingService.Get_Facility_Info(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	}
	List<Treatment> lst_treatment=stockService.Get_treatment_List();
	ObjectMapper mapper=new ObjectMapper();
	String x_treatments= mapper.writeValueAsString(lst_treatment);
	System.out.println(x_treatments);
	DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
	Date date = new Date();
	LocalDate date1=LocalDate.now();
	Date rec_date1=java.sql.Date.valueOf(date1);
	String check_current=String.valueOf(dateFormat.format(date));

	ConversionForm con_form=new ConversionForm();
	con_form.setWarehouse_name(fac.getFacility_name());
	con_form.setAgent_name(display_name);
	con_form.setConv_date(check_current);
	con_form.setFac_id(String.valueOf(session.getAttribute("fac_id")));
ModelAndView mod=new ModelAndView();
mod.setViewName("ProductConversion");
List<UserRole> roles = userRoleService.getAllUserRole(user.getUSER_NAME());
for(int i=0;i<roles.size();i++)
{
	if(roles.get(i).getRole_id()==6)
	{
		mod.setViewName("ReverseConversions");

	}
}
mod.addObject("data",con_form);
mod.addObject("treatments", x_treatments);
return mod;
}
@RequestMapping(value="/GetTreatment",method=RequestMethod.POST,consumes="application/json")
public ResponseEntity<String> Get_Treatment()throws ServletException, IOException 
{

	List<Treatment> lst_treatment=stockService.Get_treatment_List();
	ObjectMapper mapper=new ObjectMapper();
	String x_treatments= mapper.writeValueAsString(lst_treatment);
	System.out.println(x_treatments);
	return new ResponseEntity<String>(x_treatments,HttpStatus.OK);
}
@RequestMapping(value="/SubmitConversion",method=RequestMethod.POST,consumes="application/json")
public ResponseEntity<String> Submit_conversion(@RequestBody ConversionForm con_form , HttpServletRequest request)throws ServletException, IOException 
{
	HttpSession session=request.getSession();
	String convert_from_type=con_form.getFrom_type();
	List<Products> lst_product =new ArrayList<Products>();
	if(convert_from_type.equals("Untreated")||convert_from_type.equals("New"))
	{
		int fac_id=Integer.parseInt(con_form.getFac_id());
		if(convert_from_type.equals("New"))
		{
			fac_id=1;
		}
		lst_product =stockService.get_product_list(4,fac_id);
		System.out.println("Size : "+lst_product.size());
	}
	if(convert_from_type.equals("Clean"))
	{
		int fac_id=Integer.parseInt(con_form.getFac_id());

		lst_product =stockService.get_product_list(1,fac_id);
		System.out.println("Size : "+lst_product.size());
		
	}
	if(convert_from_type.equals("Out Of Order"))
	{
		int fac_id=Integer.parseInt(con_form.getFac_id());
		lst_product=stockService.get_product_list(5, fac_id);
		
	}
	if(convert_from_type.equals("Repaired"))
	{
		int fac_id=Integer.parseInt(con_form.getFac_id());
		lst_product=stockService.get_product_list(6, fac_id);
		
	}
	if(lst_product.size()==0)
	{
		return new ResponseEntity<String>("NoPro",HttpStatus.OK);
	}
	ObjectMapper mapper=new ObjectMapper();
String x_products= mapper.writeValueAsString(lst_product);
//System.out.println(x_products);

return new ResponseEntity<String>(x_products,HttpStatus.OK);
}
@RequestMapping(value="EndConversion",method=RequestMethod.POST,consumes ="application/json")
public ResponseEntity<String> EndConvert(@RequestBody ConversionForm con_form)
{
	Gson gson_products=new Gson();
	List<Products> prod_lst=con_form.getProd_lst();
	String json_str=gson_products.toJson(prod_lst);
	System.out.println(json_str);
	String out_conv="";
	int facility_id=Integer.valueOf(con_form.getFac_id());
	List<String> sku=new ArrayList<String>();
	String unique_skus="";
	
for(int i=0;i<prod_lst.size();i++)
{
	if(unique_skus.contains(prod_lst.get(i).getProduct_id()))
	{
		
	}
	else
	{
		if(unique_skus=="")
		{
			unique_skus+=prod_lst.get(i).getProduct_id();

		}
		else
		{
		unique_skus+=','+prod_lst.get(i).getProduct_id();
		}
	}
}
String [] sku_arr=unique_skus.split(",");
int [] quantity;
for(int x=0;x<sku_arr.length;x++)
{
	BigDecimal total_quan;
	int sum_quan=0;
int quan;
for(int i=0;i<prod_lst.size();i++)
{
	if(prod_lst.get(i).getProduct_id().equals(sku_arr[x]))
	{

		total_quan=prod_lst.get(i).getTotal_stock_quantity();
		quan=Integer.parseInt(String.valueOf(prod_lst.get(i).getQuantity()));
		sum_quan+=quan;
		BigDecimal check_quan=new BigDecimal(sum_quan);
		if(check_quan.compareTo(total_quan)>=1)
		{
			String x_product_name=prod_lst.get(i).getProduct_name()+" Has Wrong Quantities";
			System.out.println(x_product_name);
			return new ResponseEntity<String>(x_product_name,HttpStatus.OK);
		}
	}
	
}
}
System.out.println("UniqueSKUS:"+unique_skus);
	out_conv=stockService.Submit_Conversion(facility_id, con_form.getAgent_name(), con_form.getFrom_type(), con_form.getTo_type(), json_str);
	return new ResponseEntity<String>(out_conv,HttpStatus.OK);
}
@RequestMapping(value="/ExpectedINOUT")
public ModelAndView Get_Expected_Values(ModelAndView mod , HttpServletRequest request)
{
	HttpSession session=request.getSession();
	List<ExpectedQuantityOfProducts>lst_expected_dirty=stockService.Get_Total_Expected_Dirty(Integer.parseInt(String.valueOf(session.getAttribute("fac_id"))));
	mod.addObject("expected_dirty", lst_expected_dirty);
	mod.setViewName("ExpectedInOut");
	return mod;
}
}
